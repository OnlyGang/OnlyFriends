@model OnlyFriends.Models.ApplicationUser

@{
    ViewBag.Title = "Show user";
    var nrFollowers = Model.MyUserRelations.Where(ur => ur.Status == "IsFollowed").Count();
    var Friends = Model.MyUserRelations.Where(ur => ur.Status == "Friend").ToList();
}



<div class="row" style="margin: 20px;">

    <div class="col-md-8">
        <div>
            <br />
            <h3><i class="fa fa-user"></i> <strong>Username: </strong><span class="label label-default">@Model.UserName</span></h3>

            <br />
            <i class="fa fa-envelope"></i> <strong>Email: </strong>  <span class="label label-default">@Model.Email</span>
            <br />
            <br />
            @if (Model.PhoneNumber != null)
            {
                <i class="fa fa-phone"></i> <strong>PhoneNumber: </strong><span class="label label-default">@Model.PhoneNumber</span>
            }
        </div>
        <br />
        @if (nrFollowers != 0)
        {
            <i class="fa fa-users"></i> <strong>Followers: @nrFollowers</strong>
            <br />
            <br />
        }

        @if (ViewBag.CurrentUser.Item1 == Model.Id || ViewBag.CurrentUser.Item2)
        {
                <a class="btn btn-success" style="display:inline; padding: 9px" href="/Users/Edit/@Model.Id">Edit</a>
        }

        <!--
        Niciuna - Send, Follow, Block
        Friend - Buton Block si Unfriend
        Follow - Send Request, Unfollow, Block
        IsFollowed - Send Request, Follow, Block
        Blocked - Unblock
        IsBlocked - You can't view this page

        Daca avem Follow back -> ii facem prieteni <=> send request
    -->
        <!-- Send/Cancel Friend Request -->

        @if (ViewBag.CurrentUser.Item1 != null)
        {
            if (Model.SentFriendRequests.Where(fr => fr.RecieverId == ViewBag.CurrentUser.Item1).Count() == 1)
            {

                using (Html.BeginForm(actionName: "Accept", controllerName: "FriendRequests", method: FormMethod.Post, routeValues: new { SenderId = Model.Id, RecieverId = (string)ViewBag.CurrentUser.Item1 }, htmlAttributes: new { @style = "display: inline" }))
                {
                    @Html.HttpMethodOverride(HttpVerbs.Delete)
                    <button type="submit" class='btn btn-success' style="display:inline"> Confirm friend request </button>
                }
            }
            else if (!ViewBag.IsFriendRequestSent && ViewBag.Relation == null)
            {
                using (Html.BeginForm(actionName: "New", controllerName: "FriendRequests", method: FormMethod.Post, htmlAttributes: new { @style = "display: inline" }))
                {
                    @Html.Hidden("RecieverId", Model.Id)
                    @Html.Hidden("SenderId", (string)ViewBag.CurrentUser.Item1)
                    <button type="submit" class='btn btn-success'> Send Friend Request </button>
                }
            }
            if (ViewBag.IsFriendRequestSent)
            {
                using (Html.BeginForm(actionName: "Delete", controllerName: "FriendRequests", method: FormMethod.Post, routeValues: new { SenderId = (string)ViewBag.CurrentUser.Item1, RecieverId = Model.Id }, htmlAttributes: new { @style = "display: inline" }))
                {
                    @Html.HttpMethodOverride(HttpVerbs.Delete)
                    <button type="submit" class='btn btn-danger'>Cancel Request</button>
                }
            }


            <!-- Follow/Block buttons -->

            if (ViewBag.Relation == null)
            {

                if (!Model.IsPrivate)
                {
                    @Html.Partial("ButtonType",
                                    new ViewDataDictionary(ViewData)
                                    {
                                        {"User1Id", ViewBag.CurrentUser.Item1},
                                        {"User2Id", Model.Id},
                                        {"Method", "New" },
                                        {"Type", "Follow" },
                                        {"Status", "Follows"},
                                        {"Color", "success" }

                                    });
                }

                @Html.Partial("ButtonType",
                                new ViewDataDictionary(ViewData)
                                {
                                    {"User1Id", ViewBag.CurrentUser.Item1},
                                    {"User2Id", Model.Id},
                                    {"Method", "New" },
                                    {"Type", "Block" },
                                    {"Status", "Blocked" },
                                    {"Color", "dark" }
                                });

            }
            else
            {
                switch (ViewBag.Relation.Status)
                {
                    case "Friend":
                        {
                            @Html.Partial("ButtonType",
                            new ViewDataDictionary(ViewData)
                            {
                                {"User1Id", ViewBag.CurrentUser.Item1},
                                {"User2Id", Model.Id},
                                {"Method", "Delete" },
                                {"Type", "Unfriend" },
                                {"Status", "" },
                                {"Color", "danger" }

                            });
                            @Html.Partial("ButtonType",
                            new ViewDataDictionary(ViewData)
                            {
                                {"User1Id", ViewBag.CurrentUser.Item1},
                                {"User2Id", Model.Id},
                                {"Method", "Edit" },
                                {"Type", "Block" },
                                {"Status", "Blocked" },
                                {"Color", "dark" }

                            });
                            break;
                        }
                    case "Follows":
                        {
                            @Html.Partial("ButtonType",
                            new ViewDataDictionary(ViewData)
                            {
                                {"User1Id", ViewBag.CurrentUser.Item1},
                                {"User2Id", Model.Id},
                                {"Method", "Delete" },
                                {"Type", "Unfollow" },
                                {"Status", "" },
                                {"Color", "warning" }

                            });
                            @Html.Partial("ButtonType",
                            new ViewDataDictionary(ViewData)
                            {
                                {"User1Id", ViewBag.CurrentUser.Item1},
                                {"User2Id", Model.Id},
                                {"Method", "Edit" },
                                {"Type", "Block" },
                                {"Status", "Blocked" },
                                {"Color", "black" }

                            });
                            break;
                        }
                    case "IsFollowed":
                        {
                            @Html.Partial("ButtonType",
                            new ViewDataDictionary(ViewData)
                            {
                                {"User1Id", ViewBag.CurrentUser.Item1},
                                {"User2Id", Model.Id},
                                {"Method", "Edit" },
                                {"Type", "Follow" },
                                {"Status", "Friend" },
                                {"Color", "warning" }

                            });
                            @Html.Partial("ButtonType",
                            new ViewDataDictionary(ViewData)
                            {
                                {"User1Id", ViewBag.CurrentUser.Item1},
                                {"User2Id", Model.Id},
                                {"Method", "Edit" },
                                {"Type", "Block" },
                                {"Status", "Blocked" },
                                {"Color", "black" }

                            });
                            break;
                        }
                    case "Blocked":
                        {
                            @Html.Partial("ButtonType",
                            new ViewDataDictionary(ViewData)
                            {
                                {"User1Id", ViewBag.CurrentUser.Item1},
                                {"User2Id", Model.Id},
                                {"Method", "Delete" },
                                {"Type", "Unblock" },
                                {"Status", "" },
                                {"Color", "light" }

                            });
                            break;
                        }

                }
            }
        }

    </div>
    <div class="col-md-4">
        <img src="~/Content/Images/UserShow.svg" style="width: 80%" />
    </div>

</div>
<!-- Showing users friends -->

@if ((!Model.IsPrivate && (ViewBag.Relation == null || (ViewBag.Relation != null && ViewBag.Relation.Status != "Blocked" && ViewBag.Relation.Status != "IsBlocked"))) || (ViewBag.Relation != null && ViewBag.Relation.Status == "Friend") || ViewBag.CurrentUser.Item2)
{

    <div class="card">
        <h3>Friends:</h3>
        <hr />
        <div class="row">
            <div class="col-md-3">
                @for (var i = 0; i < Friends.Count(); i++)
                {
                    if (i % 4 == 0)
                    {
                        <p><a href="/Users/Show/@Friends[i].User2Id"><i class="fa fa-user"></i> @Friends[i].User2.UserName</a></p>
                    }
                }

            </div>
            <div class="col-md-3">
                @for (var i = 0; i < Friends.Count(); i++)
                {
                    if (i % 4 == 1)
                    {
                        <p>  <a href="/Users/Show/@Friends[i].User2Id"><i class="fa fa-user"></i> @Friends[i].User2.UserName</a></p>
                    }
                }

            </div>
            <div class="col-md-3">
                @for (var i = 0; i < Friends.Count(); i++)
                {
                    if (i % 4 == 2)
                    {
                        <p><a href="/Users/Show/@Friends[i].User2Id"><i class="fa fa-user"></i> @Friends[i].User2.UserName</a></p>
                    }
                }

            </div>
            <div class="col-md-3">
                @for (var i = 0; i < Friends.Count(); i++)
                {
                    if (i % 4 == 3)
                    {
                        <p> <a href="/Users/Show/@Friends[i].User2Id"><i class="fa fa-user"></i> @Friends[i].User2.UserName</a></p>
                    }
                }

            </div>
        </div>
    </div>
    
    <!-- Show users posts -->
    foreach (var post in Model.Posts.OrderByDescending(m => m.Date))
    {
        if (post.GroupId == null)
        {
            <div class="card" style="margin-top: 1em">
                <div class="card-body">
                    @Html.Partial("PostInfo", post)

                    <div class="panel-footer">
                        <a class=" btn btn-success btn-lg btn-block" href="/Posts/Show/@post.PostId">View post</a>
                    </div>
                </div>
            </div>

        }
    }
}




